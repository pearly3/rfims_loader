# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RfimsLoader
                                 A QGIS plugin
 Loads RS & BS kml files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Patrick Early/LGS Innovations
        email                : pearly@lgsinnovations.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .rfims_loader_dialog import RfimsLoaderDialog
import os.path
import time



class RfimsLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RfimsLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = RfimsLoaderDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&RFIMS Loader')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'RfimsLoader')
        self.toolbar.setObjectName(u'RfimsLoader')
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RfimsLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        icon_path = 'Z:/NOAA/QGIS/Icons/Load_Files.png'
        self.add_action(
            icon_path,
            text=self.tr(u'RFIMS Loader'),
            callback=self.run,
            parent=self.iface.mainWindow())
            

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&RFIMS Loader'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        #del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # Set check boxes to checked by default
        self.dlg.best_server_box.setCheckState(2)
        self.dlg.best_sinr_box.setCheckState(2)
        # Clear text from the text cells
        self.dlg.bs_import_filepath.lineEdit().clear()
        self.dlg.rs_import_filepath.lineEdit().clear()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            crs= QgsCoordinateReferenceSystem("epsg:4326")
            if len(self.dlg.bs_import_filepath.filePath()) != 0:
                ## Import Base Station Sectors
                bs_filepath = '/'.join(self.dlg.bs_import_filepath.filePath().replace('\\','/').split('/')[0:-1])
                bs_filepath = bs_filepath + '/Shapefiles/' + self.dlg.bs_import_filepath.filePath().split('\\')[-1][0:-5]
                bs_filename = self.dlg.bs_import_filepath.filePath().split('\\')[-1][0:-15]
                
                if not os.path.exists('/'.join(bs_filepath.split('/')[0:-1])):
                    os.mkdir('/'.join(bs_filepath.split('/')[0:-1]))
                    
                
                bs_layer = QgsVectorLayer(self.dlg.bs_import_filepath.filePath().replace('\\','/'),"BS_Layer","ogr")
                _writer = QgsVectorFileWriter.writeAsVectorFormat(bs_layer,bs_filepath,"utf-8",crs,"ESRI Shapefile")
                
                
                self.iface.addVectorLayer(bs_filepath + '.shp',"BS_Layer","ogr")
                self.iface.activeLayer().setName(bs_filename)
                num_fields = self.iface.activeLayer().fields().toList()
                if len(num_fields) > 7:
                    self.iface.activeLayer().dataProvider().deleteAttributes([1,2,3,4,5,6,7,8,9,10])
                    self.iface.activeLayer().updateFields()
                        
                       
                if self.dlg.best_sinr_box.checkState() == 2 and self.dlg.best_server_box.checkState() == 0:
                    self.iface.activeLayer().loadNamedStyle('Z:/NOAA/QGIS/Styles/BestSinrColor.qml')
                    self.iface.activeLayer().setName(bs_filename + '_BS_Best_SINR')
                if self.dlg.best_server_box.checkState() == 2 and self.dlg.best_sinr_box.checkState() == 0:
                    self.iface.activeLayer().loadNamedStyle('Z:/NOAA/QGIS/Styles/BestServerColor.qml')
                    self.iface.activeLayer().setName(bs_filename + '_BS_Best_Server')
                if self.dlg.best_server_box.checkState() == 2 and self.dlg.best_sinr_box.checkState() == 2:
                    layer = self.iface.activeLayer()
                    new_layer = QgsVectorLayer(layer.source(), layer.name(), layer.providerType())
                    new_layer = QgsProject.instance().addMapLayer(new_layer)
                    layer.loadNamedStyle('Z:/NOAA/QGIS/Styles/BestSinrColor.qml')
                    layer.setName(bs_filename + '_BS_Best_SINR')
                    new_layer.loadNamedStyle('Z:/NOAA/QGIS/Styles/BestServerColor.qml')
                    new_layer.setName(bs_filename + '_BS_Best_Server')

            
            ## Import Remote Sensors
            #
            if len(self.dlg.rs_import_filepath.filePath()) == 0:
                self.iface.addVectorLayer('Z:/NOAA/QGIS/Icons/empty_rs_layer.shp',"RS_Layer","ogr")
                self.iface.activeLayer().loadNamedStyle('Z:/NOAA/QGIS/Styles/RemoteSensorColor.qml')
                self.iface.activeLayer().setName('Remote_Sensors')
            else:
                rs_filepath = '/'.join(self.dlg.rs_import_filepath.filePath().replace('\\','/').split('/')[0:-1])
                rs_filepath = rs_filepath + '/Shapefiles/' + self.dlg.rs_import_filepath.filePath().split('\\')[-1][0:-5]
                rs_filename = self.dlg.rs_import_filepath.filePath().split('\\')[-1][0:-15]
                
                if not os.path.exists('/'.join(rs_filepath.split('/')[0:-1])):
                    os.mkdir('/'.join(rs_filepath.split('/')[0:-1]))
                
                # Convert kml to Shapefile
                rs_layer = QgsVectorLayer(self.dlg.rs_import_filepath.filePath().replace('\\','/'),"RS_Layer","ogr")
                _writer = QgsVectorFileWriter.writeAsVectorFormat(rs_layer,rs_filepath,"utf-8",crs,"ESRI Shapefile")
                
                self.iface.addVectorLayer(rs_filepath + '.shp',"RS_Layer","ogr")
                self.iface.activeLayer().loadNamedStyle('Z:/NOAA/QGIS/Styles/RemoteSensorColor.qml')
                self.iface.activeLayer().setName(rs_filename + '_Remote_Sensors')
                
                to_remove = QgsProject.instance().mapLayersByName(rs_filename + '_Remote_Sensors')
                for layers in range(0,len(to_remove)):
                    num_fields = to_remove[layers].fields().toList()
                    if len(num_fields) > 10:
                        to_remove[layers].dataProvider().deleteAttributes([1,2,3,4,5,6,7,8,9,10])
                        to_remove[layers].updateFields()
                
                